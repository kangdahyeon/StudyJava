package ftp_programming;

import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.InetAddress;
import java.net.ServerSocket;
import java.net.Socket;
import java.text.SimpleDateFormat;
import java.util.Date;

/**
 * [파일 서비스 프로그램]
 * 1. 클라이언트는 특정한 파일명을 서버에 요청.
 * 2. 서버는 클라이언트가 요청한 파일을 찾는다.
 * 3. 요청한 파일(리소스폴더)을 찾으면 파일에서 데이터를 읽는다.
 * 4. 읽어온 파일의 데이터를 클라이언트에게 전송.
 * 5. 클라이언트는 받은 파일의 내용을 화면에 출력하고 저장한다.
 * 
 * @author KDH
 *
 */

public class FTPServer {
	private static final int PORT = 5349;
	// 메소드
	public static void main(String[] args) {
		System.out.println();
		// 입출력 스트림
		InputStream in = null;
		OutputStream out = null;
		DataInputStream din = null;
		DataOutputStream dout = null;
		FileInputStream fin = null;
		// 소켓
		ServerSocket serverSocket = null;
		Socket clientSocket = null;
		
		// 호스트 주소
		String clientAddress = null;
		
		/* 클라이언트 접속 대기 및 소켓 생성.
		 * 수신,송신 
		 */
		try {
			serverSocket = new ServerSocket(PORT);
			System.out.println(timeStamp() + "클라이언트 접속을 대기중입니다.");
			System.out.println();
			
			clientSocket = serverSocket.accept();
			
			clientAddress = clientSocket.getInetAddress().getHostName();
			System.out.println(timeStamp() + clientAddress + "connected.");
			
			// 수신
				in = clientSocket.getInputStream();
				din = new DataInputStream(in);
				
			// 송신
				out = clientSocket.getOutputStream();
				dout = new DataOutputStream(out);
				
			// 단계 1 : 사용자가 무슨 파일을 필요로 하는지 
				String fileNeme = din.readUTF();
				
			// 단계 2 : 파일 데이터를 찾아내고 데이터를 읽는다.
				fin = new FileInputStream("Resources\\"+fileNeme);
				
			// 단계 3 : 파일 데이터를 읽고 데이터를 보낸다.
				System.out.println("파일을 보내는중");
				System.out.println();
				while(true) {
					int data = fin.read();
					if(data == -1) break;
					// 송신(data) : 서버 소스폴더 내 파일을 클라이언트에게 보냄.
					dout.write(data);}
		} catch(IOException e) {e.printStackTrace();}
		finally {
		try {
			if(din != null) { din.close();}
			if(dout != null) { dout.close();}
			if(clientSocket != null) { clientSocket.close();}
			if(serverSocket != null) { serverSocket.close();}
			
		} catch (IOException e) {e.printStackTrace();} }
	}
		
		
	/*
	 * 현재 시간을 리턴해주는 메소드
	 * 변환타입 : String
	 */
	private static String timeStamp() {
		SimpleDateFormat format = new SimpleDateFormat("[hh:mm:ss]");
		return format.format(new Date());
	}
}
