package chatting_programming;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.net.Socket;
import java.util.HashMap;

import com.framework.TcpApplication;

/**
 * AppServer로 부터 전달 받은 소켓을 이용하여 
 * 클라이언트의 접속 정보 및 송수신 기능을 관리한다.
 * @author KDH
 *
 */
public class TcpClientHandler implements Runnable {
	
	/* 클라이언트 ID를 키(K)로 하는 출력(V)을 위한 맵 자료구조 */
	public static HashMap<String, PrintWriter> sendMap = new HashMap<>();	
	
	// 클라이언트와 연결된 소켓 객체
	private Socket sock;
	
	// 클라이언트 IP 주소
	private String cAddr;
	
	// 클라이언트 ID
	private String id;
	
	
	/* 생성자 : 받아 온 소켓을 맵에 저장 */
	public TcpClientHandler(Socket cSocket) {
		this.sock = cSocket;
		this.cAddr = sock.getInetAddress().getHostAddress();
	}

	/* 참여자 입퇴실 관리 / 브로드캐스팅  / 참여자 송수신 관리*/ 
	@Override
	public void run() {
		try {
			// 1. 송신 스트림 얻기
			PrintWriter pw = new PrintWriter(
							 new OutputStreamWriter(
							 sock.getOutputStream()));
			// 2. 수신 스트림 얻기
			BufferedReader br = new BufferedReader(
								new InputStreamReader(
								sock.getInputStream()));
			
			// 3. 클라이언트 접속 정보 저장 및 브로드캐스팅
			id = br.readLine();
			TcpClientHandler .sendMap.put(id,pw);
			
			// 4. 클라이언트 입장정보를 브로드캐스팅
			TcpClientHandler.broadCast(TcpApplication.timeStamp() + "[" + id + "] 님이 들어오셨습니다.");
			
		} catch(IOException e) {
			e.printStackTrace();
			} finally {
				
			}
	}
	
	/* 귓속말 전송 메소드 */
	private void whisper(String name, String msg) {
		
	}
	
	/* 메시지 일괄 전송 메소드  : 모든 참여자에게 일괄적으로 전송 */
	public static void broadCast(String message) {
		
	}
	
	
}
