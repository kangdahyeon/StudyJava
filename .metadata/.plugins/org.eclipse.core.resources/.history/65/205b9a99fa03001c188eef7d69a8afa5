package chatting_programming;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.net.ServerSocket;
import java.net.Socket;

import com.framework.TcpApplication;

public class AppClient extends TcpApplication {
	
	public static PrintWriter pw = null;
	public static BufferedReader keyboard = null;
	public static BufferedReader br = null;
	public static Socket sSock = null;
	
	// 서버 IP 주소
	private static String sAddr = null;
	
	// 클라이언트 ID
	private String id = null;

	/*어플리케이션 초기화*/
	@Override
	public void init() {
		super.init();
	}
	
	/* 어플 실행 */
	@Override
	public void start() {
		
		System.out.println(TcpApplication.timeStamp());
		System.out.println("TCP/IP 클라이언트 프로그램을 시작합니다.");
		System.out.println("Client START ▷▷▷ ");
		
		try {
			// 1. 서버 연결
			System.out.println(TcpApplication.timeStamp() + "서버에 연결중");
			sSock = new Socket(TcpApplication.IP, TcpApplication.PORT);
			sAddr = sSock.getInetAddress().getHostAddress();
			System.out.println(TcpApplication.timeStamp() + sAddr + " ◁  connected");
			
			// 2-1 송신 스트림 얻기
				pw = new PrintWriter(
					 new OutputStreamWriter(
					 sSock.getOutputStream()));
			// 2-2 수신 스트림 얻기
				br = new BufferedReader(
					 new InputStreamReader(
					 sSock.getInputStream()));
				
			// 2-3 키보드 수신 스트림
				keyboard = new BufferedReader(
						   new InputStreamReader(System.in));
			
			// 3. 클라이언트 id를 전송한다.
				System.out.print("아이디 입력 : ");
				id = keyboard.readLine();
				pw.println(id);	// 서버에 id 보내기
				
				
			
			
			while(true) {
				
				Socket cSocket = server.accept();
				
				System.out.println(TcpApplication.timeStamp());
				System.out.println("클라이언트 접속 대기중");
				
				/* 접속한 클라이언트 송수신을 담당할 스레드를 생성하여 소켓(cSocket)을 전달한다.
				 * 접속자 수 만큼 스레드가 생성된다. */
				Thread th = new Thread(new TcpServerHandler(cSocket));
				
			}
			
		} catch(IOException e) {e.printStackTrace();}
	}

}
